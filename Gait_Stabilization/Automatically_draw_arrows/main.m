% ***********************************************************************
% MAIN SCRIPT TO DO THE ExoNET:
% The torque generated by the ExoNET is given by the sum of all the
% torques generated by each one of the MARIONETs
% ***********************************************************************

close; clear; clc;

fprintf('\n\n\n\n MAIN SCRIPT~~\n')

setUpLeg % set variables and plots
drawArrows
close all

% indexes = 2:2:200;
% AllTAUsDESIRED(indexes,:) = [];
% AllPHIs(indexes,:) = [];

[p,c,TAUs,costs] = robustOptoLeg(AllPHIs,AllTAUsDESIRED,EXONET,nTries); % optimization
e = AllTAUsDESIRED - TAUs;


pp = p;
for i = 1:3:length(pp)  % for loop to print the values of the optimal parameters
    if abs(pp(i+1))>360 % to adjust the angle theta if it's higher than 360 degrees
        while abs(pp(i+1))>360
            pp(i+1) = sign(pp(i+1))*(abs(pp(i+1))-360);
        end
    end
    if pp(i)<0          % if r is negative
        pp(i) = pp(i)*(-1);
        pp(i+1) = pp(i+1)+180;
    end
end

ppp = pp;
for i = 2:3:length(ppp)
    if abs(ppp(i))>360  % to adjust the angle theta if it's higher than 360 degrees
        while abs(ppp(i))>360
            ppp(i) = sign(ppp(i))*(abs(ppp(i))-360);
        end
    end
end

fprintf('\n\n\n\n The Optimal Parameters for each Element are~~\n')
n = 1;
for i = 1:3:length(ppp) % to print the values of the optimal parameters
    fprintf('\n Element %d\n',n)
    fprintf('\n r = %4.3f m   theta = %4.2f deg   L0 = %4.3f m\n',ppp(i),ppp(i+1),ppp(i+2))
    n = n+1;
end


fprintf('\n END MAIN SCRIPT~~\n')

